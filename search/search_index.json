{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"About","text":"<p>placeholder</p>"},{"location":"ai-controller/","title":"AI Controller Guide: Using @dragon-ai-agent","text":"<p>This guide explains how to use the AI agent (@dragon-ai-agent) that can help with ChemROF schema development tasks directly through GitHub issues and pull requests.</p>"},{"location":"ai-controller/#how-it-works","title":"How it works","text":"<p>The AI agent is integrated into this repository through GitHub Actions and can perform various tasks such as:</p> <ul> <li>Adding or updating class descriptions in the schema</li> <li>Creating example instances </li> <li>Generating documentation</li> <li>Analyzing schema structure</li> <li>Making code changes and submitting pull requests</li> </ul> <p>The agent operates with knowledge of LinkML best practices, ChemROF schema conventions, and the specific development workflow used in this repository.</p>"},{"location":"ai-controller/#how-to-invoke-the-ai-agent","title":"How to invoke the AI agent","text":""},{"location":"ai-controller/#basic-invocation","title":"Basic invocation","text":"<p>The AI agent is invoked by mentioning <code>@dragon-ai-agent</code> followed by the exact word <code>please</code> in a GitHub issue or pull request comment:</p> <pre><code>@dragon-ai-agent please [your request here]\n</code></pre> <p>Important: The word <code>please</code> must follow the mention exactly. This is a safety mechanism to prevent accidental invocation.</p>"},{"location":"ai-controller/#example-requests","title":"Example requests","text":"<p>Here are some example ways to invoke the agent:</p> <pre><code>@dragon-ai-agent please add descriptions to classes that are missing them\n</code></pre> <pre><code>@dragon-ai-agent please create an example for the MolecularEntity class\n</code></pre> <pre><code>@dragon-ai-agent please resolve this issue by updating the schema documentation\n</code></pre>"},{"location":"ai-controller/#authorization","title":"Authorization","text":"<p>The AI agent will only respond to requests from authorized controllers. </p>"},{"location":"ai-controller/#check-if-youre-authorized","title":"Check if you're authorized","text":"<p>To see who is currently authorized, check the file [.github/ai-controllers.json[(https://github.com/chemkg/chemrof/blob/main/.github/ai-controllers.json) in this repository.</p> <p>If you want to add yourself, edit this file and make a PR in the normal way</p> <p>Important: Follow proper JSON syntax with quotes around usernames and commas between entries.</p> <p>Note: Controller access should only be requested by trusted contributors who understand the schema development process and will use the AI agent responsibly.</p>"},{"location":"ai-controller/#ai-system-instructions","title":"AI system instructions","text":"<p>The AI agent follows detailed instructions stored in <code>CLAUDE.md</code> at the repository root. These instructions include:</p> <ul> <li>ChemROF schema development best practices</li> <li>LinkML conventions and workflows  </li> <li>Specific commands for generating and testing changes</li> <li>Guidelines for creating examples and documentation</li> <li>GitHub workflow procedures</li> </ul> <p>Advanced users can submit pull requests to update these instructions to improve the AI's capabilities.</p>"},{"location":"ai-controller/#best-practices-for-working-with-the-ai-agent","title":"Best practices for working with the AI agent","text":""},{"location":"ai-controller/#start-simple","title":"Start simple","text":"<p>For your first request, choose a straightforward, mechanical task where the requirements are clear. For example:</p> <pre><code>@dragon-ai-agent please add a description to the MolecularIon class based on its usage in the schema\n</code></pre>"},{"location":"ai-controller/#be-specific","title":"Be specific","text":"<p>Provide clear, detailed instructions. Include context about what you want accomplished:</p> <pre><code>@dragon-ai-agent please create an example for the PolyatomicIon class, using sulfate ion as the example, making sure to include the elemental_charge field\n</code></pre>"},{"location":"ai-controller/#request-research-when-needed","title":"Request research when needed","text":"<p>The AI can perform background research using web search:</p> <pre><code>@dragon-ai-agent please research current best practices for representing chemical reactions in semantic models, then propose updates to our Reaction class\n</code></pre>"},{"location":"ai-controller/#complex-tasks","title":"Complex tasks","text":"<p>The AI can handle multi-step tasks and will create branches and pull requests:</p> <pre><code>@dragon-ai-agent please analyze which classes are missing descriptions, then add scientifically accurate descriptions to all of them, creating examples for each class as needed\n</code></pre>"},{"location":"ai-controller/#what-the-ai-agent-can-do","title":"What the AI agent can do","text":"<ul> <li>Schema analysis: Examine class hierarchies, find missing descriptions, analyze slot usage</li> <li>Documentation: Generate or update markdown documentation  </li> <li>Example creation: Create valid YAML examples following LinkML conventions</li> <li>Code generation: Write scripts for schema manipulation or validation</li> <li>Research: Look up scientific information to ensure accuracy</li> <li>Git operations: Create branches, commit changes, and submit pull requests</li> <li>Testing: Run validation tests and fix issues</li> </ul>"},{"location":"ai-controller/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ai-controller/#no-response-from-the-agent","title":"No response from the agent","text":"<ul> <li>Check that you're an authorized controller</li> <li>Ensure you used the exact format: <code>@dragon-ai-agent please</code></li> <li>Verify the repository has GitHub Actions enabled</li> </ul>"},{"location":"ai-controller/#timeouts-or-incomplete-responses","title":"Timeouts or incomplete responses","text":"<ul> <li>Break large tasks into smaller steps</li> <li>Ask the AI to create an initial PR with partial work, then continue iterating</li> </ul>"},{"location":"ai-controller/#debugging-failures","title":"Debugging failures","text":"<ol> <li>Go to the \"Actions\" tab in GitHub</li> <li>Find the workflow run triggered by your request  </li> <li>Check the logs for error messages</li> <li>The AI agent will typically comment on the issue if it encounters problems</li> </ol>"},{"location":"ai-controller/#getting-help","title":"Getting help","text":"<p>If you encounter issues or need guidance:</p> <ol> <li>Create a new issue describing the problem</li> <li>Tag @cmungall for assistance</li> <li>Include relevant error messages or unexpected behavior details</li> </ol> <p>The AI agent is designed to be helpful and safe, but it's always learning and improving. Your feedback helps make it more effective for ChemROF development tasks.</p>"},{"location":"credits/","title":"Credits","text":"<p>this project was made using the LinkML framework</p>"},{"location":"database/","title":"Database","text":"<p>This project is primarily intended to provide a standardized schema for rigorous data modeling of chemical entities.</p> <p>However, we also include a partial (currently very partial) set of entries in the database, ETL-ed from different sources.</p> <p>The database can be found in the database directory of the GitHub repo.</p>"},{"location":"database/#etl","title":"ETL","text":"<p>The ETL is largely driven by SPARQL CONSTRUCT queries. See the sparql folder and the Makefile.</p> <p>Note so far we have only ETL'd a very small set of datatypes for proof of principles:</p> <ul> <li>ChemicalElement</li> <li>Isotope</li> <li>MonoatomicIon</li> </ul>"},{"location":"database/#identifiers","title":"Identifiers","text":"<p>Rather than using numeric IDs as in OBO, we aim to use InChi strings as identifiers for almost all ChemicalEntity classes (except for the Atom branch). This facilitates integration between different sources - e.g. whether we ingest from chembl, pubchem, chebi, or wikidata.</p> <p>For the Atom branch, we use the standard symbols and nomenclature, e.g. Cu/2-</p> <p>For the ChemicalGrouping branch, there is no appropriate InChi, since these group chemical entities via abstraction. Here we use CHEBI IDs.</p>"},{"location":"database/#database-file-organization","title":"Database file organization","text":"<p>The database is organized according to the schema. We will provide the following formats:</p> <ul> <li>RDF/Turtle (<code>.ttl</code>)</li> <li>JSON-LD (`.jsonld)</li> <li>CSVs (todo)</li> <li>YAML (todo)</li> <li>SQL dumps (todo)</li> </ul> <p>Depending on the serialization, the data may be available in different files, one file per class/table in the schema.</p> <p>For example:</p> <ul> <li>ChemicalElement.ttl from WikiData</li> </ul>"},{"location":"database/#example","title":"Example","text":"<p>the file ChemicalElement.ttl is derived from Wikidata and includes instances such as:</p> <pre><code>chem:MonoatomicIon/Mn a chem:ChemicalElement ;\n        rdfs:label \"manganese\"@en ;\n        chem:symbol \"Mn\" ;\n        chem:atomic_number 25.0 .\n</code></pre> <p>This is referenced in instances in the file MonoatomicIon.ttl, which is derived from CHEBI. For example:</p> <pre><code>chem:MonoatomicIon/Mn/+4       rdf:type        chem:MonoatomicIon ;\n        rdfs:label      \"manganese(4+)\" ;\n        chem:chebi_iri   CHEBI:25158 ;\n        chem:charge      4 ;\n        chem:has_element chem:Mn ;\n        chem:inchi_string        \"InChI=1S/Mn/q+4\"^^xsd:string .\n</code></pre> <p>Similarly the file Isotope.ttl references the elements:</p> <pre><code>chem:Isotope/Mn/21 a chem:Isotope ;\n        rdfs:label \"manganese-46m\"@en ;\n        chem:neutron_number 21.0 ;\n        chem:has_element &lt;https://w3id.org/chemrof/ChemicalElement/Mn&gt; .\n</code></pre>"},{"location":"database/#merged-database","title":"Merged Database","text":"<p>We also provide a file all-merged.owl that contains both the schema (as owl classes) and data (as instances).</p> <p>This data can be transformed into a more OBO-like OWL file, see next section.</p>"},{"location":"home/","title":"CHEMROF: Chemical Entities Mixtures Reactions Ontological Framework","text":"<p>GitHub: chemkg/chemrof</p> <p>This project provides a LinkML schema/datamodel to represent chemical entities and other related entities.</p> <p>It also includes as a proof of concept:</p> <ul> <li>small database of entities conforming to the model</li> <li>a translation of this database to an ontology (OWL TBox)</li> </ul>"},{"location":"home/#core-datamodel","title":"Core Datamodel","text":"<p>Some example classes and their instances:</p> <ul> <li>Atoms:<ul> <li>Elements: nickel atom, carbon atom, ...</li> <li>Monoatomic Ions: copper(2+), ...</li> <li>Isotopes: carbon-14, carbon-12, ...</li> <li>Fully Specified Atoms: Helium-4(2+), ...</li> </ul> </li> <li>Molecules:<ul> <li>Enantiomers: L-serine</li> <li>Racemic Mixtures: thalidomide, ...</li> </ul> </li> </ul> <p>Note that in a chemical ontology like CHEBI, concepts such as \"nickel atom\" are treated as classes. In this primary chemrof representation, they are instances, but can be later translated to OWL classes.</p>"},{"location":"home/#schema","title":"Schema","text":"<p>The schema and overall framework uses LinkML</p> <ul> <li>Browse the schema here: http://chemkg.github.io/chemrof</li> <li>See the yaml source in the src/schema directory</li> </ul>"},{"location":"home/#schema-organization","title":"Schema Organization","text":"<p>The main division is between:</p> <ul> <li>ChemicalEntity - essentially things you can write a formula/inchi for, and</li> <li>GroupingClass - generalizations/sets of chemical entities</li> </ul> <p>This distinction may be hard to grasp if you are coming from an OBO realist ontologist philosophical perspective, but this in fact allows us to serve a much wider variety of use cases than a strict OBO-style approach. At the same time we can generate an OBO-style ontology from this representation</p>"},{"location":"home/#example","title":"Example","text":"<p>Enantiomers are mirror-image stereoisomers.</p> <p></p> <p>The Enantiomer class represents a chemical entity that has a form (e.g L/D) specified.</p> <p>Racemic mixtures are compounds with equal amounts left and right-handed enantiomers. </p> SchemaExample Data (Turtle)Example Data (YAML) <pre><code>racemic mixture:\n  aliases:\n    - racemate\n    - racemic mixture of enantiomers\n  is_a: precise chemical mixture\n  description: &gt;-\n    a chemical compound that has equal amounts of left- and right-handed enantiomers of a chiral molecule. An example is Thalidomide\n  slot_usage:\n    has left enantiomer:\n      required: true\n      range: enantiomer\n    has right enantiomer:\n      required: true\n      range: enantiomer\n    chirality agnostic form:\n      recommended: true\n      required: false\n      range: molecule\n    IUPAC name:\n      pattern: \"^rac-\"\n  defining_slots:\n    - has left enantiomer\n    - has right enantiomer\n  exact_mappings:\n    - CHEBI:60911\n    - NCIT:C103198\n    - wdeschema:E47\n    - wd:Q467717\n    - goldbook:R05025\n  see_also:\n    - https://github.com/ebi-chebi/ChEBI/issues/3245\n</code></pre> <pre><code>ChemicalEntity:InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29%2Fs3\n        a chem:RacemicMixture ;\n        rdfs:label \"thalidomide\" ;\n        chem:chebi_iri obo:CHEBI_9513 ;\n        chem:chirality_agnostic_form ChemicalEntity:InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29 ;\n        chem:has_left_enantiomer ChemicalEntity:InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29%2Ft9-%2Fm0%2Fs1 ;\n        chem:has_right_enantiomer ChemicalEntity:InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29%2Ft9-%2Fm1%2Fs1 .\n</code></pre> <p>```yaml   id: \"ChemicalEntity:InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29%2Fs3\"   type: \"RacemicMixture\"   label: \"thalidomide\"   chebi_iri: \"CHEBI:9513\"   chirality_agnostic_form: \"ChemicalEntity:InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29\"   has_left_enantiomer: \"ChemicalEntity:InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29%2Ft9-%2Fm0%2Fs1\"   has_right_enantiomer: \"ChemicalEntity:InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%291</p> <p>``````</p> OWL (TBox) <pre><code>&lt;owl:Class rdf:about=\"https://w3id.org/chemrof/ChemicalEntity/InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29%2Fs3\"&gt;\n    &lt;owl:equivalentClass&gt;\n        &lt;owl:Class&gt;\n            &lt;owl:intersectionOf rdf:parseType=\"Collection\"&gt;\n                &lt;rdf:Description rdf:about=\"https://w3id.org/chemrof/RacemicMixture\"/&gt;\n                &lt;owl:Restriction&gt;\n                    &lt;owl:onProperty rdf:resource=\"https://w3id.org/chemrof/chirality_agnostic_form\"/&gt;\n                    &lt;owl:someValuesFrom rdf:resource=\"https://w3id.org/chemrof/ChemicalEntity/InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29\"/&gt;\n                &lt;/owl:Restriction&gt;\n            &lt;/owl:intersectionOf&gt;\n        &lt;/owl:Class&gt;\n    &lt;/owl:equivalentClass&gt;\n    &lt;owl:equivalentClass&gt;\n        &lt;owl:Class&gt;\n            &lt;owl:intersectionOf rdf:parseType=\"Collection\"&gt;\n                &lt;rdf:Description rdf:about=\"https://w3id.org/chemrof/RacemicMixture\"/&gt;\n                &lt;owl:Restriction&gt;\n                    &lt;owl:onProperty rdf:resource=\"https://w3id.org/chemrof/has_left_enantiomer\"/&gt;\n                    &lt;owl:someValuesFrom rdf:resource=\"https://w3id.org/chemrof/ChemicalEntity/InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29%2Ft9-%2Fm0%2Fs1\"/&gt;\n                &lt;/owl:Restriction&gt;\n                &lt;owl:Restriction&gt;\n                    &lt;owl:onProperty rdf:resource=\"https://w3id.org/chemrof/has_right_enantiomer\"/&gt;\n                    &lt;owl:someValuesFrom rdf:resource=\"https://w3id.org/chemrof/ChemicalEntity/InChI%3D1S%2FC13H10N2O4%2Fc16-10-6-5-9%2811%2817%2914-10%2915-12%2818%297-3-1-2-4-8%287%2913%2815%2919%2Fh1-4%2C9H%2C5-6H2%2C%28H%2C14%2C16%2C17%29%2Ft9-%2Fm1%2Fs1\"/&gt;\n                &lt;/owl:Restriction&gt;\n            &lt;/owl:intersectionOf&gt;\n        &lt;/owl:Class&gt;\n    &lt;/owl:equivalentClass&gt;\n    &lt;rdfs:subClassOf rdf:resource=\"https://w3id.org/chemrof/RacemicMixture\"/&gt;\n    &lt;rdfs:label&gt;thalidomide&lt;/rdfs:label&gt;\n&lt;/owl:Class&gt;\n</code></pre> <p>Note that a class \"Enantiomer\" does not really make sense at an OBO level where all chemical entities are classes; it is a metaclass.</p>"},{"location":"home/#mappings","title":"Mappings","text":"<ul> <li>SSSOM</li> </ul> <p>Example mappings:</p> subject_id subject_label predicate_id object_id match_type subject_source chemrof:bond_type_enum#covalent covalent skos:exactMatch gc:NormalBond skos:exactMatch https://w3id.org/chemrof chemrof:bond_type_enum#aromatic aromatic skos:exactMatch gc:AromaticBond skos:exactMatch https://w3id.org/chemrof chemrof:element_metallic_classification#Metallic Metallic skos:exactMatch damlpt:Metallic skos:exactMatch https://w3id.org/chemrof chemrof:nanostructure_morphology_enum#nanotube nanotube skos:exactMatch CHEBI:50796 skos:exactMatch https://w3id.org/chemrof chemrof:periodic_table_block_enum#s-block s-block skos:exactMatch CHEBI:33674 skos:exactMatch https://w3id.org/chemrof chemrof:Enantiomer enantiomer skos:exactMatch SIO:010777 skos:exactMatch https://w3id.org/chemrof"},{"location":"home/#derived-artefacts","title":"Derived artefacts","text":"<p>Currently the main derived artefacts of interest are:</p> <ul> <li>JSON Schema</li> <li>ShEx</li> <li>SHACL</li> </ul> <p>With care, you also see:</p> <ul> <li>OWL -- note this should be read as a meta-ontology by OBO people</li> </ul>"},{"location":"home/#comparison-with-chebi-and-wikidata","title":"Comparison with CHEBI and Wikidata","text":"<p>TODO</p>"},{"location":"metaclasses/","title":"Classes and Metaclasses","text":"<p>We need an alternative classification of chemical atoms and elements that is different than the existing CHEBI. There are deep problems with classification of atoms and molecular entities in CHEBI. These problems arise from a basic confusion about classes and metaclasses. Sources like IUPAC represent chemical species, instances of which are chemical elements, NOT instances in the OBO sense. This fundamental confusion means CHEBI does not work for OBO.</p> <p>The idea here is to provide a schema in which the instances are classes in a chemical ontology. The schema could be thought of as an ontology of metaclasses, but care must be taken here due to mixing of different metamodel formalisms (this schema is closed-world and thus not well represented in OWL).</p> <p>The schema language used here is linkml, which provides powerful modeling framework that incorporates aspects of UML, ShEx, and OWL, and is semantic-web ready.</p> <p>The goal is to create instances of these schema classes (e.g. carbon-14) which would be OWL classes, auto-populated with standardized names and logical axioms. This could be done via a compilation to dospd or robot, or direcly within the LinkML framework (see this issue ). TBD.</p>"},{"location":"motivation/","title":"Motivation","text":"<p>We need an alternative classification of chemical atoms and elements that is different than the existing CHEBI. There are deep problems with classification of atoms and molecular entities in CHEBI. These problems arise from a basic confusion about classes and metaclasses. Sources like IUPAC represent chemical species, instances of which are chemical elements, NOT instances in the OBO sense. This fundamental confusion means CHEBI does not work for OBO.</p> <p>The idea here is to provide a schema in which the instances are classes in a chemical ontology. The schema could be thought of as an ontology of metaclasses, but care must be taken here due to mixing of different metamodel formalisms (this schema is closed-world and thus not well represented in OWL).</p> <p>The schema language used here is linkml, which provides powerful modeling framework that incorporates aspects of UML, ShEx, and OWL, and is semantic-web ready.</p> <p>The goal is to create instances of these schema classes (e.g. carbon-14) which would be OWL classes, auto-populated with standardized names and logical axioms. This could be done via a compilation to dospd or robot, or direcly within the LinkML framework (see this issue ). TBD.</p> <p>For driving use case and why we need aan alternatibe to existing chebi atom / simple molecule representation see:</p> <ul> <li>https://github.com/EnvironmentOntology/envo/issues/989</li> </ul>"},{"location":"ontology/","title":"Ontology Generation","text":"<p>The primary objective of this schema is to provide a data model for representing chemical entities and their groupings, where these are database instances, and to use this for aligning across different chemical databases.</p> <p>A secondary objective is to be able to generate an OBO-style ontology from the data model, and to use this to help advance the development of CHEBI.</p>"},{"location":"ontology/#download-owl","title":"Download OWL","text":"<p>See the ontology folder on github</p>"},{"location":"ontology/#owl-generation","title":"OWL generation","text":"<p>See Makefile.etl for specific details.</p> <p>The basic idea is to transform the turtle instance data (where for example <code>carbon</code> is an instance of the ChemicalElement class, and <code>carbon-12</code> is an instance of the sibling Isotope class) into classes, and to use reasoning to classify.</p> <p>Currently this is done via SPARQL construct (see owlgen folder)</p> <p>Conversion to use linkml-owl is in progress.</p>"},{"location":"ontology/#example","title":"Example","text":"<p>Mn(+4) is represented in the database as an individual of type MonoatomicIon</p> <pre><code>chem:MonoatomicIon/Mn/+4       rdf:type        chem:MonoatomicIon ;\n        rdfs:label      \"manganese(4+)\" ;\n        ns1:chebi_iri   CHEBI:25158 ;\n        ns1:charge      4 ;\n        ns1:has_element chem:Mn ;\n        ns1:inchi_string        \"InChI=1S/Mn/q+4\"^^xsd:string .\n</code></pre> <p>This is translated to class-level (via this query):</p> <pre><code>chem:MonoatomicIon/Mn/+4\n        a                    owl:Class ;\n        rdfs:label           \"manganese(4+)\" ;\n        owl:equivalentClass\n              [ owl:intersectionOf\n                          ( chem:ChemicalElement/Mn\n                            [ a               owl:Restriction ;\n                              owl:hasValue    4 ;\n                              owl:onProperty  chem:charge\n                            ]\n                          ) ] .\n</code></pre> <p>This will autoclassify to \"manganese ion\" etc</p> <p>here is an example of the atom hierarchy in protege, showing automatic classification:</p> <p></p>"},{"location":"ontology/#two-level-representation","title":"Two-level representation","text":"<p>One thing that may seem unintuitive is that instances at the LinkML level are classes at the OBO level. This is illustrated here:</p>"},{"location":"ontology/#relationship-to-templating-systems","title":"Relationship to templating systems","text":"<p>One way to view this project is:</p> <ul> <li>the schema is a hierarchical collection of DOSDP templates or ROBOT templates</li> <li>the database are the TSVs/spreadsheets that are inputs to the templates to generate OWL</li> </ul> <p>Using LinkML as the modeling system provides some advantages. Rather than a collection of denormalized tables, the inputs to the OWL generation are objects/instances/rows conforming to a full object model/schema, allowing for both rigorous modeling and powerful programmatic transformations.</p> <p>Conversion to use linkml-owl is in progress.</p>"},{"location":"python/","title":"Python API","text":""},{"location":"python/#todos","title":"TODOs","text":"<ul> <li>rdkit integration</li> </ul>"},{"location":"uris/","title":"Uris","text":""},{"location":"uris/#uri-encoding-of-inchis","title":"URI encoding of InChIs","text":"<p>SELECT ?x WHERE {   BIND(ENCODE_FOR_URI('InChI=1S/C6H8O6/c7-1-2(8)5-3(9)4(10)6(11)12-5/h2,5,7-8,10-11H,1H2/t2-,5+/m0/s1') as ?x) }</p> <p><code>InChI=1S/C6H8O6/c7-1-2(8)5-3(9)4(10)6(11)12-5/h2,5,7-8,10-11H,1H2/t2-,5+/m0/s1</code></p> <p>===&gt;</p> <p><code>InChI%3D1S%2FC6H8O6%2Fc7-1-2%288%295-3%289%294%2810%296%2811%2912-5%2Fh2%2C5%2C7-8%2C10-11H%2C1H2%2Ft2-%2C5%2B%2Fm0%2Fs1</code></p>"}]}